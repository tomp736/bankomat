@inject ILoggerService loggerService;

<table class="keypad">
    <tr>
        <td colspan="3">
            @if(KeyPadMode == KeyPadMode.YesNo)
            {
                <input type="text" maxlength="@KeyPadMaxChars" disabled>
            }
            else if(KeyPadMode == KeyPadMode.Amount)
            {
                <input type="number" @bind="KeyPadValue" maxlength="@KeyPadMaxChars" disabled>
            }
            else if(KeyPadMode == KeyPadMode.Text)
            {
                <input type="text" @bind="KeyPadValue" maxlength="@KeyPadMaxChars" disabled>
            }
            else if(KeyPadMode == KeyPadMode.Password)
            {
                <input type="password" @bind="KeyPadValue" maxlength="@KeyPadMaxChars" disabled>
            }
        </td>

    </tr>
    <tr>
        <td>
            <KeyPadButton KeyPadEntry="KeyPadEntry.One" OnButtonClick="OnButtonClick">1</KeyPadButton>
        </td>
        <td>
            <KeyPadButton KeyPadEntry="KeyPadEntry.Two" OnButtonClick="OnButtonClick">2</KeyPadButton>
        </td>
        <td>
            <KeyPadButton KeyPadEntry="KeyPadEntry.Three" OnButtonClick="OnButtonClick">3</KeyPadButton>
        </td>
    </tr>
    <tr>
        <td>
            <KeyPadButton KeyPadEntry="KeyPadEntry.Four" OnButtonClick="OnButtonClick">4</KeyPadButton>
        </td>
        <td>
            <KeyPadButton KeyPadEntry="KeyPadEntry.Five" OnButtonClick="OnButtonClick">5</KeyPadButton>
        </td>
        <td>
            <KeyPadButton KeyPadEntry="KeyPadEntry.Six" OnButtonClick="OnButtonClick">6</KeyPadButton>
        </td>
    </tr>
    <tr>
        <td>
            <KeyPadButton KeyPadEntry="KeyPadEntry.Seven" OnButtonClick="OnButtonClick">7</KeyPadButton>
        </td>
        <td>
            <KeyPadButton KeyPadEntry="KeyPadEntry.Eight" OnButtonClick="OnButtonClick">8</KeyPadButton>
        </td>
        <td>
            <KeyPadButton KeyPadEntry="KeyPadEntry.Nine" OnButtonClick="OnButtonClick">9</KeyPadButton>
        </td>
    </tr>
    <tr>
        <td>
            <KeyPadButton KeyPadEntry="KeyPadEntry.Left" OnButtonClick="OnButtonClick">
                <svg width="1em" height="1em" viewBox="0 0 16 16" class="bi bi-backspace" fill="currentColor" xmlns="http://www.w3.org/2000/svg">
                    <path fill-rule="evenodd" d="M6.603 2h7.08a1 1 0 0 1 1 1v10a1 1 0 0 1-1 1h-7.08a1 1 0 0 1-.76-.35L1 8l4.844-5.65A1 1 0 0 1 6.603 2zm7.08-1a2 2 0 0 1 2 2v10a2 2 0 0 1-2 2h-7.08a2 2 0 0 1-1.519-.698L.241 8.65a1 1 0 0 1 0-1.302L5.084 1.7A2 2 0 0 1 6.603 1h7.08zM5.829 5.146a.5.5 0 0 0 0 .708L7.976 8l-2.147 2.146a.5.5 0 0 0 .707.708l2.147-2.147 2.146 2.147a.5.5 0 0 0 .707-.708L9.39 8l2.146-2.146a.5.5 0 0 0-.707-.708L8.683 7.293 6.536 5.146a.5.5 0 0 0-.707 0z"/>
                </svg>
            </KeyPadButton>
        </td>
        <td>
            <KeyPadButton KeyPadEntry="KeyPadEntry.Zero" OnButtonClick="OnButtonClick">0</KeyPadButton>
        </td>
        <td>
            <KeyPadButton KeyPadEntry="KeyPadEntry.Right" OnButtonClick="OnButtonClick">
                <svg width="1em" height="1em" viewBox="0 0 16 16" class="bi bi-backspace-reverse" fill="currentColor" xmlns="http://www.w3.org/2000/svg">
                    <path fill-rule="evenodd" d="M9.08 2H2a1 1 0 0 0-1 1v10a1 1 0 0 0 1 1h7.08a1 1 0 0 0 .76-.35L14.682 8 9.839 2.35A1 1 0 0 0 9.08 2zM2 1a2 2 0 0 0-2 2v10a2 2 0 0 0 2 2h7.08a2 2 0 0 0 1.519-.698l4.843-5.651a1 1 0 0 0 0-1.302L10.6 1.7A2 2 0 0 0 9.08 1H2zm7.854 4.146a.5.5 0 0 1 0 .708L7.707 8l2.147 2.146a.5.5 0 0 1-.708.708L7 8.707l-2.146 2.147a.5.5 0 0 1-.708-.708L6.293 8 4.146 5.854a.5.5 0 1 1 .708-.708L7 7.293l2.146-2.147a.5.5 0 0 1 .708 0z"/>
                </svg>
            </KeyPadButton>
        </td>
    </tr>
</table>

@code
{
    [Parameter]
    public String KeyPadValue { get; set; }
    [Parameter]
    public EventCallback<KeyPadEntry> OnKeyPadEntry { get; set; }
    [Parameter]
    public KeyPadMode KeyPadMode { get; set; }
    [Parameter]
    public int KeyPadMaxChars { get; set; }

    public async Task OnButtonClick(KeyPadEntry keyPadEntry)
    {
        if(KeyPadMode == KeyPadMode.YesNo)
        {
        }
        else if(keyPadEntry.IsNumber() && KeyPadValue.Length < KeyPadMaxChars)
        {
            string tempValue = KeyPadValue;
            tempValue += (int)keyPadEntry;

            if(KeyPadMode == KeyPadMode.Amount)
            {
                int tempIntValue = int.Parse(tempValue);
                KeyPadValue = tempIntValue.ToString();
            }
            else
            {
                KeyPadValue = tempValue;
            }
        }
        else if(keyPadEntry.IsBack())
        {
            if(KeyPadValue != null && KeyPadValue.Length > 0)
            {
                KeyPadValue = KeyPadValue.Substring(0, KeyPadValue.Length - 1);
            }
        }
        await OnKeyPadEntry.InvokeAsync(keyPadEntry);
    }

    public void Clear()
    {
        KeyPadValue = string.Empty;
    }
}